;; FauxAPI credentials
;;
;; format:-
;; 
;; [PFFA<apikey_value>]
;; secret = <apisecret_value>
;; owner = <free form text field to help self-manage who the key was issued to>
;;
;;
;; NB1: <apikey_value> and <apisecret_value> must have alphanumeric chars ONLY!
;;      be sure to remove /+= chars possible from a naive base64encode call
;; NB2: <apikey_value> MUST start with the prefix PFFA (ie. pfSense Faux API)
;; NB3: <apikey_value> MUST be >= 12 chars AND <= 40 chars in total length
;; NB4: <apisecret_value> MUST be >= 40 chars AND <= 128 chars in length
;; NB5: <owner> provides no function other than display
;; 
;; Generate a valid <apikey_value> using the following command line example:-
;;  $ echo PFFA`head /dev/urandom | base64 -w0 | tr -d /+= | head -c 20`
;;
;; Generate a valid <apisecret_value> using the following command line example:-
;;  $ echo `head /dev/urandom | base64 -w0 | tr -d /+= | head -c 60`
;;

;; PFFAexample01 is hardcoded to be inoperative
[PFFAexample01]
secret = abcdefghijklmnopqrstuvwxyz0123456789abcd
permit = alias_*, config_*, gateway_*, rule_*, send_*, system_*, function_*
owner = example key PFFAexample01 - hardcoded to be inoperative

;; PFFAexample02 is hardcoded to be inoperative
[PFFAexample02]
secret = ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789ABCD
permit = *
owner = example key PFFAexample02 - hardcoded to be inoperative
