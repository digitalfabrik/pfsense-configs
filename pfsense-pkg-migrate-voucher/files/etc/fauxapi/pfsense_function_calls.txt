
# 
# pfsense_function_calls.txt
# ===
# This file defines the function_calls that can be addressed through pfsense_fauxapi
# using the "function_call" api interface.  It should be noted that this is a 
# VERY VERY raw interface into the inner workings of pfSense and it is not 
# recommended for users that do not have a solid understanding of PHP and pfSense.
# Further, not all pfSense functions are appropriate to be called through the 
# "function_call" pfsense_fauxapi interface and limited testing has been performed 
# against the possible outcomes and responses.  It is possible to seriously harm 
# your pfSense system if you do not 100% understand what is going on - you have 
# been warned.
# 
# All that said, the "function_call" pfsense_fauxapi interface is an enormously
# enabling feature that exposes most of the pfSense infrastructure allowing you 
# to get on with automating devops and network infrastructure.

#
# Entries in this file without any function definition are available to be included
# but none of the functions within them are available to be accessed.
# 
globals.inc
util.inc
xmlparse.inc
notices.inc
config.lib.inc
system.inc

#
# The remainder (and bulk of) the content of this file is automatically generated 
# using a simple collection of shell tools to extract all possible pfSense functions.
# The pfsense_fauxapi interface expects to "see" these entries in more or less 
# the same manner - the command line(s) used are expressed below.
# 
# $ cat src/etc/version
# 2.3.4-RELEASE
# 
# $ grep '^function ' src/etc/inc/*.inc | grep '{' | grep -v '&' | grep -v 'xmlreader.inc' | grep -v 'upgrade_config.inc' | cut -d'/' -f4 | sort | cut -d'{' -f1 | sort | uniq
# 
# NB: the removal of xmlreader.inc causing xmlparse.inc to be used which is consistent with the pfSense default and pfSense_fauxapi
# 


#
# authgui.inc:function display_error_form($http_code, $desc) 
# authgui.inc:function display_login_form() 
# auth.inc:function auth_get_authserver_list() 
# auth.inc:function auth_get_authserver($name) 
# auth.inc:function get_user_expiration_date($username) 
# auth.inc:function get_user_settings($username) 
# auth.inc:function index_groups() 
# auth.inc:function index_users() 
# auth.inc:function is_account_disabled($username) 
# auth.inc:function is_account_expired($username) 
# auth.inc:function ldap_backed($username, $passwd, $authcfg) 
# auth.inc:function ldap_format_host($host) 
# auth.inc:function ldap_get_groups($username, $authcfg) 
# auth.inc:function ldap_get_user_ous($show_complete_ou=true, $authcfg) 
# auth.inc:function ldap_setup_caenv($authcfg) 
# auth.inc:function ldap_test_bind($authcfg) 
# auth.inc:function ldap_test_connection($authcfg) 
# auth.inc:function local_backed($username, $passwd) 
# auth.inc:function local_group_del($group) 
# auth.inc:function local_group_del_user($user) 
# auth.inc:function local_group_set($group, $reset = false) 
# auth.inc:function local_sync_accounts() 
# auth.inc:function local_user_del($user) 
# auth.inc:function local_user_get_groups($user, $all = false) 
# auth.inc:function local_user_set_groups($user, $new_groups = NULL) 
# auth.inc:function radius_get_groups($attributes) 
# auth.inc:function save_widget_settings($username, $settings, $message = "") 
# auth.inc:function session_auth() 
# auth.inc:function userHasPrivilege($userent, $privid = false) 
# captiveportal.inc:function captiveportal_allowedhostname_configure() 
# captiveportal.inc:function captiveportal_allowedip_configure() 
# captiveportal.inc:function captiveportal_allowedip_configure_entry($ipent, $ishostname = false) 
# captiveportal.inc:function captiveportal_blocked_mac($mac) 
# captiveportal.inc:function captiveportal_configure() 
# captiveportal.inc:function captiveportal_configure_zone($cpcfg) 
# captiveportal.inc:function captiveportal_disconnect_all($term_cause = 6, $logoutReason = "DISCONNECT") 
# captiveportal.inc:function captiveportal_disconnect_client($sessionid, $term_cause = 1, $logoutReason = "LOGOUT") 
# captiveportal.inc:function captiveportal_disconnect($dbent, $radiusservers, $term_cause = 1, $stop_time = null) 
# captiveportal.inc:function captiveportal_free_dn_ruleno($ruleno) 
# captiveportal.inc:function captiveportal_free_dnrules($rulenos_start = 2000, $rulenos_range_max = 64500) 
# captiveportal.inc:function captiveportal_free_ipfw_ruleno($ruleno) 
# captiveportal.inc:function captiveportal_get_dn_passthru_ruleno($value) 
# captiveportal.inc:function captiveportal_get_ipfw_passthru_ruleno($value) 
# captiveportal.inc:function captiveportal_get_last_activity($ip, $mac = NULL, $table = 1) 
# captiveportal.inc:function captiveportal_get_next_dn_ruleno($rulenos_start = 2000, $rulenos_range_max = 64500) 
# captiveportal.inc:function captiveportal_get_next_ipfw_ruleno($rulenos_start = 2, $rulenos_range_max = 64500) 
# captiveportal.inc:function captiveportal_get_radius_servers() 
# captiveportal.inc:function captiveportal_init_radius_servers() 
# captiveportal.inc:function captiveportal_init_rules_byinterface($interface) 
# captiveportal.inc:function captiveportal_init_rules($reinit = false) 
# captiveportal.inc:function captiveportal_init_webgui() 
# captiveportal.inc:function captiveportal_init_webgui_zone($cpcfg) 
# captiveportal.inc:function captiveportal_init_webgui_zonename($zone) 
# captiveportal.inc:function captiveportal_isip_logged($clientip) 
# captiveportal.inc:function captiveportal_load_modules() 
# captiveportal.inc:function captiveportal_logportalauth($user, $mac, $ip, $status, $message = null) 
# captiveportal.inc:function captiveportal_opendb() 
# captiveportal.inc:function captiveportal_passthrumac_configure_entry($macent, $pipeinrule = false) 
# captiveportal.inc:function captiveportal_passthrumac_configure($filename = false, $startindex = 0, $stopindex = 0) 
# captiveportal.inc:function captiveportal_passthrumac_delete_entry($macent) 
# captiveportal.inc:function captiveportal_passthrumac_findbyname($username) 
# captiveportal.inc:function captiveportal_prune_old() 
# captiveportal.inc:function captiveportal_prune_old_automac() 
# captiveportal.inc:function captiveportal_radius_stop_all($term_cause = 6, $logoutReason = "DISCONNECT") 
# captiveportal.inc:function captiveportal_read_db($query = "") 
# captiveportal.inc:function captiveportal_read_usedmacs_db() 
# captiveportal.inc:function captiveportal_reapply_attributes($cpentry, $attributes) 
# captiveportal.inc:function captiveportal_remove_entries($remove) 
# captiveportal.inc:function captiveportal_send_server_accounting($off = false) 
# captiveportal.inc:function captiveportal_syslog($message) 
# captiveportal.inc:function captiveportal_write_db($queries) 
# captiveportal.inc:function captiveportal_write_elements() 
# captiveportal.inc:function captiveportal_write_usedmacs_db($usedmacs) 
# captiveportal.inc:function get_default_captive_portal_html() 
# captiveportal.inc:function getNasIP() 
# captiveportal.inc:function getVolume($ip, $mac = NULL) 
# captiveportal.inc:function portal_allow($clientip, $clientmac, $username, $password = null, $attributes = null, $pipeno = null, $radiusctx = null) 
# captiveportal.inc:function portal_consume_passthrough_credit($clientmac) 
# captiveportal.inc:function portal_hostname_from_client_ip($cliip) 
# captiveportal.inc:function portal_ip_from_client_ip($cliip) 
# captiveportal.inc:function portal_mac_radius($clientmac, $clientip) 
# captiveportal.inc:function portal_reply_page($redirurl, $type = null, $message = null, $clientmac = null, $clientip = null, $username = null, $password = null) 
# captiveportal.inc:function radius($username, $password, $clientip, $clientmac, $type, $radiusctx = null) 
# certs.inc:function cert_compare($cert1, $cert2) 
# certs.inc:function cert_get_cn($crt, $isref = false) 
# certs.inc:function cert_get_dates($str_crt, $decode = true) 
# certs.inc:function cert_get_issuer($str_crt, $decode = true) 
# certs.inc:function cert_get_modulus_keysize($str_crt, $decode = true, $type = "crt") 
# certs.inc:function cert_get_modulus($str_crt, $decode = true, $type = "crt") 
# certs.inc:function cert_get_purpose($str_crt, $decode = true) 
# certs.inc:function cert_get_serial($str_crt, $decode = true) 
# certs.inc:function cert_get_subject_array($crt) 
# certs.inc:function cert_get_subject_hash($crt) 
# certs.inc:function cert_get_subject($str_crt, $decode = true) 
# certs.inc:function cert_in_use($certref) 
# certs.inc:function crl_in_use($crlref) 
# certs.inc:function csr_get_modulus($str_crt, $decode = true) 
# certs.inc:function csr_get_subject($str_crt, $decode = true) 
# certs.inc:function is_captiveportal_cert($certref) 
# certs.inc:function is_cert_revoked($cert, $crlref = "") 
# certs.inc:function is_crl_internal($crl) 
# certs.inc:function is_ipsec_cert($certref) 
# certs.inc:function is_openvpn_client_cert($certref) 
# certs.inc:function is_openvpn_server_cert($certref) 
# certs.inc:function is_openvpn_server_crl($crlref) 
# certs.inc:function is_package_cert($certref) 
# certs.inc:function is_user_cert($certref) 
# certs.inc:function is_webgui_cert($certref) 
# certs.inc:function prv_get_modulus($str_crt, $decode = true) 
# config.console.inc:function autodetect_interface($ifname, $fp) 
# config.console.inc:function check_for_alternate_interfaces() 
# config.console.inc:function interfaces_setup() 
# config.console.inc:function set_networking_interfaces_ports() 
# config.console.inc:function vlan_setup() 
# config.lib.inc:function backup_config() 
# config.lib.inc:function cleanup_backupcache($lock = false) 
# config.lib.inc:function config_install($conffile) 
# config.lib.inc:function config_restore($conffile) 
# config.lib.inc:function config_validate($conffile) 
# config.lib.inc:function conf_mount_ro() 
# config.lib.inc:function conf_mount_rw() 
# config.lib.inc:function convert_config() 
# config.lib.inc:function disable_security_checks() 
config.lib.inc:function discover_last_backup() 
# config.lib.inc:function encrypted_configxml() 
# config.lib.inc:function generate_config_cache($config) 
# config.lib.inc:function get_backups() 
# config.lib.inc:function get_config_user() 
# config.lib.inc:function make_config_revision_entry($desc = null, $override_user = null) 
# config.lib.inc:function parse_config_bootup() 
# config.lib.inc:function parse_config($parse = false) 
# config.lib.inc:function pfSense_clear_globals() 
# config.lib.inc:function reset_factory_defaults($lock = false, $reboot_required = true) 
# config.lib.inc:function restore_backup($file) 
# config.lib.inc:function restore_security_checks() 
# config.lib.inc:function safe_write_file($file, $content, $force_binary = false) 
# config.lib.inc:function security_checks_disabled() 
# config.lib.inc:function set_device_perms() 
# config.lib.inc:function write_config($desc="Unknown", $backup = true, $write_config_only = false) 
# easyrule.inc:function easyrule_block_alias_add($host, $int = 'wan') 
# easyrule.inc:function easyrule_block_alias_getid($int = 'wan') 
# easyrule.inc:function easyrule_block_host_add($host, $int = 'wan', $ipproto = "inet") 
# easyrule.inc:function easyrule_block_rule_create($int = 'wan', $ipproto = "inet") 
# easyrule.inc:function easyrule_block_rule_exists($int = 'wan', $ipproto = "inet") 
# easyrule.inc:function easyrule_find_rule_interface($int) 
# easyrule.inc:function easyrule_parse_block($int, $src, $ipproto = "inet") 
# easyrule.inc:function easyrule_parse_getblock($int = 'wan', $sep = "\n") 
# easyrule.inc:function easyrule_parse_pass($int, $proto, $src, $dst, $dstport = 0, $ipproto = "inet") 
# easyrule.inc:function easyrule_parse_unblock($int, $host, $ipproto = "inet") 
# easyrule.inc:function easyrule_pass_rule_add($int, $proto, $srchost, $dsthost, $dstport, $ipproto) 
# filter.inc:function discover_pkg_rules($ruletype) 
# filter.inc:function display_separator($separators, $nrules, $columns_in_table) 
# filter.inc:function filter_configure() 
# filter.inc:function filter_configure_sync($delete_states_if_needed = true) 
# filter.inc:function filter_delete_states_for_down_gateways() 
# filter.inc:function filter_expand_alias($alias_name) 
# filter.inc:function filter_expand_alias_array($alias_name) 
# filter.inc:function filter_flush_nat_table() 
# filter.inc:function filter_flush_state_table() 
# filter.inc:function filter_generate_aliases() 
# filter.inc:function filter_generate_gateways() 
# filter.inc:function filter_generate_ipsec_rules($log = array()) 
# filter.inc:function filter_generate_nested_alias($name) 
# filter.inc:function filter_generate_optcfg_array() 
# filter.inc:function filter_generate_scrubing() 
# filter.inc:function filter_generate_user_rule_arr($rule) 
# filter.inc:function filter_generate_user_rule($rule) 
# filter.inc:function filter_get_antilockout_ports($wantarray = false) 
# filter.inc:function filter_get_direct_networks_list($returnsubnetsonly = true) 
# filter.inc:function filter_get_reflection_interfaces($natif = "") 
# filter.inc:function filter_get_time_based_rule_status($schedule) 
# filter.inc:function filter_get_vpns_list() 
# filter.inc:function filter_nat_rules_automatic_tonathosts($with_descr = false) 
# filter.inc:function filter_nat_rules_generate() 
# filter.inc:function filter_nat_rules_generate_if ($if, $src = "any", $srcport = "", $dst = "any", $dstport = "", $natip = "", $natport = "", $nonat = false, $staticnatport = false, $proto = "", $poolopts = "") 
# filter.inc:function filter_nat_rules_outbound_automatic($src) 
# filter.inc:function filter_negaterule_tracker() 
# filter.inc:function filter_pflog_start($kill_first = false) 
# filter.inc:function filter_process_carp_rules($log) 
# filter.inc:function filter_rules_generate() 
# filter.inc:function filter_rules_spoofcheck_generate($ifname, $ifcfg, $log) 
# filter.inc:function filter_rule_tracker($tracker) 
# filter.inc:function filter_setup_logging_interfaces() 
# filter.inc:function filter_tdr_day($schedule) 
# filter.inc:function filter_tdr_hour($schedule) 
# filter.inc:function filter_tdr_install_cron($should_install) 
# filter.inc:function filter_tdr_month($schedule) 
# filter.inc:function filter_tdr_position($schedule) 
# filter.inc:function fix_rule_label($descr) 
# filter.inc:function ifridx($if, $ridx) 
# filter.inc:function is_bogonsv6_used() 
# filter.inc:function separator_rows($separators) 
# filter.inc:function tdr_install_cron($should_install) 
# filter.inc:function user_rule_descr_maxlen() 
# filter.inc:function xinetd_service_entry($entry_array) 
# filter_log.inc:function buffer_rules_clear() 
# filter_log.inc:function buffer_rules_load() 
# filter_log.inc:function conv_log_filter($logfile, $nentries, $tail = 50, $filtertext = "", $filterinterface = null) 
# filter_log.inc:function escape_filter_regex($filtertext) 
# filter_log.inc:function find_action_image($action) 
# filter_log.inc:function find_rule_by_number_buffer($rulenum, $trackernum, $type) 
# filter_log.inc:function find_rule_by_number($rulenum, $trackernum, $type="block") 
# filter_log.inc:function get_port_with_service($port, $proto) 
# filter_log.inc:function handle_ajax() 
# filter_log.inc:function in_arrayi($needle, $haystack) 
# filter_log.inc:function match_filter_field($flent, $fields) 
# filter_log.inc:function match_filter_line($flent, $filtertext = "") 
# filter_log.inc:function parse_firewall_log_line($line) 
# filter_log.inc:function parse_system_log_line($line) 
# filter_log.inc:function parse_unknown_log_line($line) 
# filter_log.inc:function parse_vpn_login_log_line($line) 
# filter_log.inc:function parse_vpn_service_log_line($line) 
# globals.inc:function platform_booting($on_console = false) 
# gmirror.inc:function gmirror_activate_consumer($mirror, $consumer) 
# gmirror.inc:function gmirror_clear_consumer($consumer) 
# gmirror.inc:function gmirror_configure_balance($mirror, $balancemethod) 
# gmirror.inc:function gmirror_consumer_has_metadata($consumer) 
# gmirror.inc:function gmirror_deactivate_consumer($mirror, $consumer) 
# gmirror.inc:function gmirror_force_rebuild($mirror, $consumer) 
# gmirror.inc:function gmirror_forget_disconnected($mirror) 
# gmirror.inc:function gmirror_get_all_unused_consumer_sizes_on_disk($disk) 
# gmirror.inc:function gmirror_get_consumer_metadata($consumer) 
# gmirror.inc:function gmirror_get_consumer_metadata_mirror($consumer) 
# gmirror.inc:function gmirror_get_consumers_in_mirror($mirror) 
# gmirror.inc:function gmirror_get_disks() 
# gmirror.inc:function gmirror_get_mirror_balance($mirror) 
# gmirror.inc:function gmirror_get_mirrors() 
# gmirror.inc:function gmirror_get_mirror_size($mirror) 
# gmirror.inc:function gmirror_get_status() 
# gmirror.inc:function gmirror_get_status_single($mirror) 
# gmirror.inc:function gmirror_get_unused_consumers() 
# gmirror.inc:function gmirror_get_unused_consumer_size($consumer) 
# gmirror.inc:function gmirror_html_status() 
# gmirror.inc:function gmirror_insert_consumer($mirror, $consumer) 
# gmirror.inc:function gmirror_remove_consumer($mirror, $consumer) 
# gmirror.inc:function is_consumer_in_mirror($consumer, $mirror) 
# gmirror.inc:function is_consumer_unused($consumer) 
# gmirror.inc:function is_consumer_used($consumer) 
# gmirror.inc:function is_valid_consumer($consumer) 
# gmirror.inc:function is_valid_disk($disk) 
# gmirror.inc:function is_valid_mirror($mirror) 
# gwlb.inc:function dhclient_update_gateway_groups_defaultroute($interface = "wan") 
# gwlb.inc:function fixup_default_gateway($ipprotocol, $gateways_status, $gateways_arr) 
# gwlb.inc:function gateway_is_gwgroup_member($name) 
# gwlb.inc:function get_dpinger_status($gwname, $detailed = false) 
# gwlb.inc:function interface_gateway_group_member($interface) 
# gwlb.inc:function lookup_gateway_interface_by_name($name) 
# gwlb.inc:function lookup_gateway_ip_by_name($name, $disabled = false) 
# gwlb.inc:function lookup_gateway_monitor_ip_by_name($name) 
# gwlb.inc:function return_dpinger_defaults() 
# gwlb.inc:function return_gateway_groups_array() 
# gwlb.inc:function return_gateways_array($disabled = false, $localhost = false, $inactive = false) 
gwlb.inc:function return_gateways_status($byname = false) 
gwlb.inc:function return_gateways_status_text($byname = false, $brief = false) 
# gwlb.inc:function running_dpinger_processes() 
# gwlb.inc:function setup_gateways_monitor() 
# gwlb.inc:function start_dpinger($gateway) 
# gwlb.inc:function stop_dpinger($gwname = '') 
# gwlb.inc:function validate_address_family($ipaddr, $gwname, $disabled = false) 
# interfaces.inc:function convert_friendly_interface_to_friendly_descr($interface) 
# interfaces.inc:function convert_friendly_interface_to_real_interface_name($interface) 
# interfaces.inc:function convert_real_interface_to_friendly_descr($interface) 
# interfaces.inc:function convert_real_interface_to_friendly_interface_name($interface = "wan", $checkparent = false) 
# interfaces.inc:function DHCP6_Config_File_Advanced($interface, $wancfg, $wanif) 
# interfaces.inc:function DHCP6_Config_File_Override($wancfg, $wanif) 
# interfaces.inc:function DHCP6_Config_File_Substitutions($wancfg, $wanif, $dhcp6cconf) 
# interfaces.inc:function DHCP_Config_File_Advanced($interface, $wancfg, $wanif) 
# interfaces.inc:function DHCP_Config_File_Override($wancfg, $wanif) 
# interfaces.inc:function DHCP_Config_File_Substitutions($wancfg, $wanif, $dhclientconf) 
# interfaces.inc:function DHCP_Config_Option_Split($option_string) 
# interfaces.inc:function does_interface_exist($interface, $flush = true) 
# interfaces.inc:function does_vip_exist($vip) 
# interfaces.inc:function find_dhclient_process($interface) 
# interfaces.inc:function find_dhcp6c_process($interface) 
# interfaces.inc:function find_interface_ip($interface, $flush = false) 
# interfaces.inc:function find_interface_ipv6($interface, $flush = false) 
# interfaces.inc:function find_interface_ipv6_ll($interface, $flush = false) 
# interfaces.inc:function find_interface_subnet($interface, $flush = false) 
# interfaces.inc:function find_interface_subnetv6($interface, $flush = false) 
# interfaces.inc:function find_ip_interface($ip, $bits = null) 
# interfaces.inc:function find_virtual_ip_alias($ip, $bits = null) 
# interfaces.inc:function generate_random_mac_address() 
# interfaces.inc:function get_current_wan_address($interface = "wan") 
# interfaces.inc:function get_failover_interface($interface, $family = "all") 
# interfaces.inc:function get_interface_arr($flush = false) 
# interfaces.inc:function get_interface_default_mtu($type = "ethernet") 
# interfaces.inc:function get_interface_ip($interface = "wan") 
# interfaces.inc:function get_interface_ipv6($interface = "wan", $flush = false, $linklocal_fallback = false) 
# interfaces.inc:function get_interface_linklocal($interface = "wan") 
# interfaces.inc:function get_interface_mac($interface) 
# interfaces.inc:function get_interface_mtu($interface) 
# interfaces.inc:function get_interface_subnet($interface = "wan") 
# interfaces.inc:function get_interface_subnetv6($interface = "wan") 
# interfaces.inc:function get_interfaces_with_gateway() 
# interfaces.inc:function get_interface_vendor_mac($interface) 
# interfaces.inc:function getMPDCRONSettings($pppif) 
# interfaces.inc:function get_parent_interface($interface, $avoidrecurse = false) 
# interfaces.inc:function get_parent_physical_interface($interface) 
# interfaces.inc:function get_possible_listen_ips($include_ipv6_link_local=false) 
# interfaces.inc:function get_possible_traffic_source_addresses($include_ipv6_link_local=false) 
# interfaces.inc:function get_real_interface($interface = "wan", $family = "all", $realv6iface = false, $flush = true) 
# interfaces.inc:function get_real_wan_interface($interface = "wan") 
# interfaces.inc:function get_vip_descr($ipaddress) 
# interfaces.inc:function get_wireless_channel_info($interface) 
# interfaces.inc:function get_wireless_modes($interface) 
# interfaces.inc:function guess_interface_from_ip($ipaddress) 
# interfaces.inc:function handle_pppoe_reset($post_array) 
# interfaces.inc:function interface_6rd_configure($interface = "wan", $wancfg) 
# interfaces.inc:function interface_6to4_configure($interface = "wan", $wancfg) 
# interfaces.inc:function interface_bridge_add_member($bridgeif, $interface, $flagsapplied = false) 
# interfaces.inc:function interface_bridge_configure_advanced($bridge) 
# interfaces.inc:function interface_bridge_configure_stp($bridge) 
# interfaces.inc:function interface_bring_down($interface = "wan", $destroy = false, $ifacecfg = false) 
# interfaces.inc:function interface_configure($interface = "wan", $reloadall = false, $linkupevent = false) 
# interfaces.inc:function interface_dhcp_configure($interface = "wan") 
# interfaces.inc:function interface_dhcpv6_configure($interface = "wan", $wancfg) 
# interfaces.inc:function interface_find_child_cfgmtu($realiface) 
# interfaces.inc:function interface_get_wireless_base($wlif) 
# interfaces.inc:function interface_get_wireless_clone($wlif) 
# interfaces.inc:function interface_group_add_member($interface, $groupname) 
# interfaces.inc:function interface_has_dhcp($interface, $family = 4) 
# interfaces.inc:function interface_has_gateway($friendly) 
# interfaces.inc:function interface_has_gatewayv6($friendly) 
# interfaces.inc:function interface_isppp_type($interface) 
# interfaces.inc:function interface_is_wireless_clone($wlif) 
# interfaces.inc:function interface_lagg_configure($lagg) 
# interfaces.inc:function interface_mtu_wanted_for_pppoe($realif) 
# interfaces.inc:function interface_netgraph_needed($interface = "wan") 
# interfaces.inc:function interface_ppps_configure($interface) 
# interfaces.inc:function interface_proxyarp_configure($interface = "") 
# interfaces.inc:function interface_reconfigure($interface = "wan", $reloadall = false) 
# interfaces.inc:function interfaces_bridge_configure($checkmember = 0, $realif = "") 
# interfaces.inc:function interfaces_bring_up($interface) 
# interfaces.inc:function interfaces_carp_set_maintenancemode($carp_maintenancemode) 
# interfaces.inc:function interfaces_configure() 
# interfaces.inc:function interfaces_create_wireless_clones() 
# interfaces.inc:function interface_setup_pppoe_reset_file($pppif, $iface="") 
# interfaces.inc:function interfaces_gif_configure($checkparent = 0, $realif = "") 
# interfaces.inc:function interfaces_gre_configure($checkparent = 0, $realif = "") 
# interfaces.inc:function interfaces_group_setup() 
# interfaces.inc:function interfaces_lagg_configure($realif = "") 
# interfaces.inc:function interfaces_loopback_configure() 
# interfaces.inc:function interfaces_ptpid_next() 
# interfaces.inc:function interfaces_ptpid_used($ptpid) 
# interfaces.inc:function interfaces_qinq_configure() 
# interfaces.inc:function interfaces_staticarp_configure($if) 
# interfaces.inc:function interfaces_sync_setup() 
# interfaces.inc:function interfaces_vips_configure($interface = "") 
# interfaces.inc:function interfaces_vlan_configure($realif = "") 
# interfaces.inc:function interface_track6_6rd_configure($interface = "lan", $lancfg) 
# interfaces.inc:function interface_track6_6to4_configure($interface = "lan", $lancfg) 
# interfaces.inc:function interface_track6_configure($interface = "lan", $wancfg, $linkupevent = false) 
# interfaces.inc:function interface_vip_bring_down($vip) 
# interfaces.inc:function interface_vip_cleanup($interface, $inet = "all", $type = VIP_ALL) 
# interfaces.inc:function interface_virtual_create($interface) 
# interfaces.inc:function interface_vlan_mtu_configured($iface) 
# interfaces.inc:function interface_wireless_clone($realif, $wlcfg) 
# interfaces.inc:function ip_in_interface_alias_subnet($interface, $ipalias) 
# interfaces.inc:function is_altq_capable($int) 
# interfaces.inc:function is_interface_group($if) 
# interfaces.inc:function is_interface_wireless($interface) 
# interfaces.inc:function is_jumbo_capable($iface) 
# interfaces.inc:function kill_dhclient_process($interface) 
# interfaces.inc:function kill_dhcp6client_process($interface) 
# interfaces.inc:function kill_hostapd($interface) 
# interfaces.inc:function kill_wpasupplicant($interface) 
# interfaces.inc:function link_interface_to_bridge($int) 
# interfaces.inc:function link_interface_to_gif($interface) 
# interfaces.inc:function link_interface_to_gre($interface) 
# interfaces.inc:function link_interface_to_group($int) 
# interfaces.inc:function link_interface_to_qinqs($int, $action = "") 
# interfaces.inc:function link_interface_to_track6($int, $action = "") 
# interfaces.inc:function link_interface_to_vips($int, $action = "", $vhid = '') 
# interfaces.inc:function link_interface_to_vlans($int, $action = "") 
# interfaces.inc:function remove_ifindex($ifname) 
# interfaces.inc:function set_interface_mtu($interface, $mtu) 
# interfaces.inc:function validate_ipv4_list($value) 
# ipsec.inc:function ipsec_dump_mobile() 
# ipsec.inc:function ipsec_dump_sad() 
# ipsec.inc:function ipsec_dump_spd() 
# ipsec.inc:function ipsec_enabled() 
# ipsec.inc:function ipsec_fixup_ip($ipaddr) 
# ipsec.inc:function ipsec_fixup_network($network) 
# ipsec.inc:function ipsec_get_descr($ikeid) 
# ipsec.inc:function ipsec_get_number_of_phase2($ikeid) 
# ipsec.inc:function ipsec_get_phase1($ikeid) 
# ipsec.inc:function ipsec_ikeid_next() 
# ipsec.inc:function ipsec_ikeid_used($ikeid) 
# ipsec.inc:function ipsec_list_sa() 
# ipsec.inc:function ipsec_mobilekey_sort() 
# ipsec.inc:function ipsec_new_reqid() 
# itemid.inc:function get_id($id, $array) 
# itemid.inc:function get_unique_id() 
# led.inc:function char_to_morse($char) 
# led.inc:function led_alloff() 
# led.inc:function led_assigninterfaces() 
# led.inc:function led_blink($led, $speed = 0) 
# led.inc:function led_count() 
# led.inc:function led_ctl($led, $str) 
# led.inc:function led_digit($led, $digitstring) 
# led.inc:function led_exists($led) 
# led.inc:function led_kitt() 
# led.inc:function led_morse($led, $message) 
# led.inc:function led_normalize() 
# led.inc:function led_off($led) 
# led.inc:function led_on($led) 
# led.inc:function led_pattern($led, $pattern, $repeat = true) 
# led.inc:function str_to_morse($string) 
# notices.inc:function are_notices_pending($category = "all") 
# notices.inc:function close_notice($id) 
# notices.inc:function dump_xml_notices() 
# notices.inc:function file_notice($id, $notice, $category = "General", $url = "", $priority = 1, $local_only = false) 
# notices.inc:function get_notices($category = "all") 
# notices.inc:function notify_all_remote($msg) 
# notices.inc:function notify_via_growl($message, $force=false) 
# notices.inc:function notify_via_smtp($message, $force = false) 
# notices.inc:function print_notice_box($category = "all") 
# notices.inc:function print_notices($notices, $category = "all") 
# notices.inc:function register_via_growl() 
# notices.inc:function send_smtp_message($message, $subject = "(no subject)", $force = false) 
# openvpn.inc:function openvpn_build_bridge_list() 
# openvpn.inc:function openvpn_build_cert_list($include_none = false, $prioritize_server_certs = false) 
# openvpn.inc:function openvpn_build_crl_list() 
# openvpn.inc:function openvpn_build_if_list() 
# openvpn.inc:function openvpn_build_mode_list() 
# openvpn.inc:function openvpn_clear_route($mode, $settings) 
# openvpn.inc:function openvpn_create_dhparams($bits) 
# openvpn.inc:function openvpn_create_dirs() 
# openvpn.inc:function openvpn_create_key() 
# openvpn.inc:function openvpn_delete($mode, $settings) 
# openvpn.inc:function openvpn_gen_route_ipv4($network, $iroute = false) 
# openvpn.inc:function openvpn_gen_route_ipv6($network, $iroute = false) 
# openvpn.inc:function openvpn_gen_routes($value, $ipproto = "ipv4", $push = false, $iroute = false) 
# openvpn.inc:function openvpn_get_active_clients() 
# openvpn.inc:function openvpn_get_active_servers($type="multipoint") 
# openvpn.inc:function openvpn_get_cipherlist() 
# openvpn.inc:function openvpn_get_client_status($client, $socket) 
# openvpn.inc:function openvpn_get_digestlist() 
# openvpn.inc:function openvpn_get_engines() 
# openvpn.inc:function openvpn_get_interface_ip($ip, $cidr) 
# openvpn.inc:function openvpn_get_interface_ipv6($ipv6, $prefix) 
# openvpn.inc:function openvpn_get_server_status($server, $socket) 
# openvpn.inc:function openvpn_get_settings($mode, $vpnid) 
# openvpn.inc:function openvpn_kill_client($port, $remipp) 
# openvpn.inc:function openvpn_port_next($prot, $interface = "wan") 
# openvpn.inc:function openvpn_port_used($prot, $interface, $port, $curvpnid = 0) 
# openvpn.inc:function openvpn_reconfigure($mode, $settings) 
# openvpn.inc:function openvpn_refresh_crls() 
# openvpn.inc:function openvpn_restart_by_vpnid($mode, $vpnid) 
# openvpn.inc:function openvpn_restart($mode, $settings) 
# openvpn.inc:function openvpn_resync_all($interface = "") 
# openvpn.inc:function openvpn_resync_csc_all() 
# openvpn.inc:function openvpn_resync_gwgroup($gwgroupname = "") 
# openvpn.inc:function openvpn_resync($mode, $settings) 
# openvpn.inc:function openvpn_validate_cidr_ipv4($value) 
# openvpn.inc:function openvpn_validate_cidr_ipv6($value) 
# openvpn.inc:function openvpn_validate_cidr($value, $name, $multiple = false, $ipproto = "ipv4") 
# openvpn.inc:function openvpn_validate_engine($engine) 
# openvpn.inc:function openvpn_validate_host($value, $name) 
# openvpn.inc:function openvpn_validate_port($value, $name) 
# openvpn.inc:function openvpn_vpnid_next() 
# openvpn.inc:function openvpn_vpnid_used($vpnid) 
# pfsense-utils.inc:function add_hostname_to_watch($hostname) 
# pfsense-utils.inc:function addrtolower($ip) 
# pfsense-utils.inc:function add_rule_to_anchor($anchor, $rule, $label) 
# pfsense-utils.inc:function after_sync_bump_adv_skew() 
# pfsense-utils.inc:function backup_config_section($section_name) 
# pfsense-utils.inc:function calculate_ipv6_delegation_length($if) 
# pfsense-utils.inc:function compare_hostname_to_dnscache($hostname) 
# pfsense-utils.inc:function convert_128bit_to_ipv6($ip6bin) 
# pfsense-utils.inc:function convert_ip_to_network_format($ip, $subnet) 
# pfsense-utils.inc:function convert_ipv6_to_128bit($ipv6) 
# pfsense-utils.inc:function convert_seconds_to_dhms($sec, $showhoursonly = false) 
# pfsense-utils.inc:function dhcpv6_pd_str_help($pdlen) 
# pfsense-utils.inc:function does_url_exist($url) 
# pfsense-utils.inc:function download_file($url, $destination, $verify_ssl = true, $connect_timeout = 5, $timeout = 0) 
# pfsense-utils.inc:function download_file_with_progress_bar($url, $destination, $verify_ssl = true, $readbody = 'read_body', $connect_timeout = 5, $timeout = 0) 
# pfsense-utils.inc:function enable_hardware_offloading($interface) 
# pfsense-utils.inc:function filter_rules_compare($a, $b) 
# pfsense-utils.inc:function filter_rules_sort() 
# pfsense-utils.inc:function generate_ipv6_from_mac($mac) 
# pfsense-utils.inc:function get_carp_interface_status($carpid) 
pfsense-utils.inc:function get_carp_status() 
# pfsense-utils.inc:function get_configured_pppoe_server_interfaces() 
# pfsense-utils.inc:function get_country_name($country_code) 
# pfsense-utils.inc:function get_cpu_speed() 
# pfsense-utils.inc:function get_css_files() 
# pfsense-utils.inc:function get_dir($dir) 
# pfsense-utils.inc:function get_disk_info() 
pfsense-utils.inc:function get_dns_servers() 
# pfsense-utils.inc:function get_filename_from_url($url) 
# pfsense-utils.inc:function get_freebsd_version() 
# pfsense-utils.inc:function get_include_contents($filename) 
# pfsense-utils.inc:function get_interface_info($ifdescr) 
# pfsense-utils.inc:function get_locale_list() 
# pfsense-utils.inc:function get_pfsync_interface_status($pfsyncinterface) 
# pfsense-utils.inc:function get_pppoes_child_interfaces($ifpattern) 
# pfsense-utils.inc:function get_ppp_uptime($port) 
# pfsense-utils.inc:function get_real_slice_from_glabel($label) 
# pfsense-utils.inc:function get_tmp_file() 
# pfsense-utils.inc:function get_uptime_sec() 
# pfsense-utils.inc:function hardware_offloading_applyflags($iface) 
# pfsense-utils.inc:function have_natpfruleint_access($if) 
# pfsense-utils.inc:function have_ruleint_access($if) 
# pfsense-utils.inc:function host_firmware_version($tocheck = "") 
# pfsense-utils.inc:function huawei_mode_to_string($mode, $submode) 
# pfsense-utils.inc:function huawei_rssi_to_string($rssi) 
# pfsense-utils.inc:function huawei_service_to_string($state) 
# pfsense-utils.inc:function huawei_simstate_to_string($state) 
# pfsense-utils.inc:function interface_supports_polling($iface) 
# pfsense-utils.inc:function is_alias_inuse($alias) 
# pfsense-utils.inc:function is_dhcp_server_enabled() 
# pfsense-utils.inc:function is_dhcpv6_server_enabled() 
# pfsense-utils.inc:function is_fqdn($fqdn) 
# pfsense-utils.inc:function is_ipaddr_configured($ipaddr, $ignore_if = "", $check_localip = false, $check_subnets = false, $cidrprefix = "") 
# pfsense-utils.inc:function is_pppoe_server_enabled() 
# pfsense-utils.inc:function is_private_ip($iptocheck) 
# pfsense-utils.inc:function is_radvd_enabled() 
# pfsense-utils.inc:function is_schedule_inuse($schedule) 
# pfsense-utils.inc:function is_serial_enabled() 
# pfsense-utils.inc:function isvm() 
# pfsense-utils.inc:function load_crypto() 
# pfsense-utils.inc:function load_mac_manufacturer_table() 
# pfsense-utils.inc:function load_thermal_hardware() 
# pfsense-utils.inc:function merge_config_section($section_name, $new_contents) 
# pfsense-utils.inc:function merge_ipv6_delegated_prefix($prefix, $suffix, $len = 64) 
# pfsense-utils.inc:function nanobsd_clone_slice() 
# pfsense-utils.inc:function nanobsd_detect_slice_info() 
# pfsense-utils.inc:function nanobsd_friendly_slice_name($slicename) 
# pfsense-utils.inc:function nanobsd_get_active_slice() 
# pfsense-utils.inc:function nanobsd_get_boot_drive() 
# pfsense-utils.inc:function nanobsd_get_boot_slice() 
# pfsense-utils.inc:function nanobsd_get_size() 
# pfsense-utils.inc:function nanobsd_switch_boot_slice() 
# pfsense-utils.inc:function nanobsd_update_fstab($gslice, $complete_path, $oldufs, $newufs) 
# pfsense-utils.inc:function parse_aliases_file($filename, $type = "url", $max_items = -1, $kflc = false) 
# pfsense-utils.inc:function pfsense_default_state_size() 
# pfsense-utils.inc:function pfsense_default_table_entries_size() 
# pfsense-utils.inc:function pfsense_default_tables_size() 
# pfsense-utils.inc:function pfSense_handle_custom_code($src_dir) 
# pfsense-utils.inc:function pfs_version_compare($cur_time, $cur_text, $remote) 
# pfsense-utils.inc:function pkg_call_plugins($plugin_type, $plugin_params) 
# pfsense-utils.inc:function print_value_list($list, $count = 10, $separator = ",") 
# pfsense-utils.inc:function process_alias_tgz($temp_filename) 
# pfsense-utils.inc:function process_alias_urltable($name, $type, $url, $freq, $forceupdate=false, $validateonly=false) 
# pfsense-utils.inc:function read_body($ch, $string) 
# pfsense-utils.inc:function read_header($ch, $string) 
# pfsense-utils.inc:function reload_all() 
# pfsense-utils.inc:function reload_all_sync() 
# pfsense-utils.inc:function reload_interfaces() 
# pfsense-utils.inc:function reload_interfaces_sync() 
# pfsense-utils.inc:function reload_ttys() 
# pfsense-utils.inc:function remove_text_from_file($file, $text) 
# pfsense-utils.inc:function restore_aliastables() 
# pfsense-utils.inc:function restore_config_section($section_name, $new_contents) 
# pfsense-utils.inc:function return_hex_ipv4($ipv4) 
# pfsense-utils.inc:function reverse_strrchr($haystack, $needle) 
# pfsense-utils.inc:function rmdir_recursive($path, $follow_links=false) 
# pfsense-utils.inc:function set_language() 
# pfsense-utils.inc:function setup_microcode() 
# pfsense-utils.inc:function setup_polling() 
# pfsense-utils.inc:function setup_serial_port($when = "save", $path = "") 
# pfsense-utils.inc:function update_alias_name($new_alias_name, $orig_alias_name) 
# pfsense-utils.inc:function update_alias_names_upon_change($section, $field, $new_alias_name, $origname) 
# pfsense-utils.inc:function update_alias_url_data() 
# pfsense-utils.inc:function update_output_window($text) 
# pfsense-utils.inc:function update_progress_bar($percent, $first_time) 
# pfsense-utils.inc:function update_status($status) 
# pfsense-utils.inc:function version_compare_dates($a, $b) 
# pfsense-utils.inc:function version_compare_numeric($a, $b) 
# pfsense-utils.inc:function version_compare_string($a, $b) 
# pfsense-utils.inc:function version_get_string_value($a) 
# pfsense-utils.inc:function WakeOnLan($addr, $mac) 
# pfsense-utils.inc:function where_is_ipaddr_configured($ipaddr, $ignore_if = "", $check_localip = false, $check_subnets = false, $cidrprefix = "") 
# pfsense-utils.inc:function xml2array($contents, $get_attributes = 1, $priority = 'tag') 
# pfsense-utils.inc:function zte_mode_to_string($mode, $submode) 
# pfsense-utils.inc:function zte_rssi_to_string($rssi) 
# pfsense-utils.inc:function zte_service_to_string($service) 
# pfsense-utils.inc:function zte_simstate_to_string($state) 
# pkg-utils.inc:function delete_package_xml($package_name, $when = "post-deinstall") 
# pkg-utils.inc:function eval_once($toeval) 
# pkg-utils.inc:function get_after_install_info($package_name) 
# pkg-utils.inc:function get_base_pkg_name() 
# pkg-utils.inc:function get_meta_pkg_name() 
# pkg-utils.inc:function get_package_id($package_name) 
# pkg-utils.inc:function get_package_internal_name($package_data) 
pkg-utils.inc:function get_system_pkg_version($baseonly = false) 
# pkg-utils.inc:function install_package_xml($package_name) 
# pkg-utils.inc:function is_package_installed($package_name) 
# pkg-utils.inc:function is_pkg_installed($pkg_name) 
# pkg-utils.inc:function package_reinstall_all() 
# pkg-utils.inc:function pkg_call($params, $mute = false, $extra_env = array()) 
# pkg-utils.inc:function pkg_delete($pkg_name) 
# pkg-utils.inc:function pkg_env($extra_env = array()) 
# pkg-utils.inc:function pkg_install($pkg_name, $force = false) 
pkg-utils.inc:function pkg_list_repos() 
# pkg-utils.inc:function pkg_switch_repo($path) 
# pkg-utils.inc:function pkg_update($force = false) 
# pkg-utils.inc:function pkg_valid_name($pkgname) 
# pkg-utils.inc:function pkg_version_compare($v1, $v2) 
# pkg-utils.inc:function read_package_config($package_name) 
# pkg-utils.inc:function read_package_configurationfile($package_name) 
# pkg-utils.inc:function register_all_installed_packages() 
# pkg-utils.inc:function resync_all_package_configs($show_message = false) 
# pkg-utils.inc:function stop_packages() 
# pkg-utils.inc:function sync_package($package_name) 
# pkg-utils.inc:function uninstall_package($package_name) 
# priv.inc:function cmp_privkeys($a, $b) 
# priv.inc:function get_priv_files($directory) 
# priv.inc:function isAllowedPage($page) 
# priv.inc:function isAllowed($username, $page) 
# priv.inc:function map_page_privname($page) 
# priv.inc:function sort_user_privs($privs) 
# rrd.inc:function create_new_rrd($rrdcreatecmd) 
# rrd.inc:function dump_rrd_to_xml($rrddatabase, $xmldumpfile) 
# rrd.inc:function enable_rrd_graphing() 
# rrd.inc:function kill_traffic_collector() 
# rrd.inc:function migrate_rrd_format($rrdoldxml, $rrdnewxml) 
# rrd.inc:function restore_rrd() 
# services.inc:function configure_cron() 
# services.inc:function dhcpdkey($dhcpifconf) 
# services.inc:function dhcpdzones($ddns_zones) 
# services.inc:function dyndnsCheckIP($int) 
# services.inc:function install_cron_job($command, $active = false, $minute = "0", $hour = "*", $monthday = "*", $month = "*", $weekday = "*", $who = "root") 
# services.inc:function services_dhcpd_configure($family = "all", $blacklist = array()) 
# services.inc:function services_dhcpdv4_configure() 
# services.inc:function services_dhcpdv6_configure($blacklist = array()) 
# services.inc:function services_dhcrelay6_configure() 
# services.inc:function services_dhcrelay_configure() 
# services.inc:function services_dnsmasq_configure($restart_dhcp = true) 
# services.inc:function services_dnsupdate_process($int = "", $updatehost = "", $forced = false) 
# services.inc:function services_dyndns_configure_client($conf) 
# services.inc:function services_dyndns_configure($int = "") 
# services.inc:function services_igmpproxy_configure() 
# services.inc:function services_radvd_configure($blacklist = array()) 
# services.inc:function services_snmpd_configure() 
# services.inc:function services_unbound_configure($restart_dhcp = true) 
# services.inc:function upnp_action ($action) 
# services.inc:function upnp_start() 
# service-utils.inc:function find_service_by_cp_zone($zone) 
# service-utils.inc:function find_service_by_name($name) 
# service-utils.inc:function find_service_by_openvpn_vpnid($vpnid) 
# service-utils.inc:function get_pkg_descr($package_name) 
# service-utils.inc:function get_service_control_links($service, $addname = false) 
service-utils.inc:function get_services() 
# service-utils.inc:function get_service_status_icon($service, $withtext = true, $smallicon = false, $withthumbs = false, $title = "service_state") 
service-utils.inc:function get_service_status($service) 
# service-utils.inc:function is_dhcp_running($interface) 
# service-utils.inc:function is_pid_running($pidfile) 
service-utils.inc:function is_service_enabled($service_name) 
service-utils.inc:function is_service_running($service, $ps = "") 
# service-utils.inc:function restart_service_if_running($service) 
# service-utils.inc:function restart_service($name) 
# service-utils.inc:function service_control_restart($name, $extras) 
# service-utils.inc:function service_control_start($name, $extras) 
# service-utils.inc:function service_control_stop($name, $extras) 
# service-utils.inc:function service_dispname_compare($a, $b) 
# service-utils.inc:function service_name_compare($a, $b) 
# service-utils.inc:function start_service($name) 
# service-utils.inc:function stop_service($name) 
# service-utils.inc:function write_rcfile($params) 
# shaper.inc:function altq_check_default_queues() 
# shaper.inc:function altq_get_default_queue($interface) 
# shaper.inc:function build_iface_without_this_queue($iface, $qname) 
# shaper.inc:function clean_child_queues($type, $mypath) 
# shaper.inc:function cleanup_dnqueue_from_rules($queue) 
# shaper.inc:function cleanup_queue_from_rules($queue) 
# shaper.inc:function dnpipe_find_nextnumber() 
# shaper.inc:function dnqueue_find_nextnumber() 
# shaper.inc:function filter_generate_altq_queues() 
# shaper.inc:function filter_generate_dummynet_rules() 
# shaper.inc:function get_altq_name_list() 
# shaper.inc:function get_bandwidth($bw, $scale, $obj) 
# shaper.inc:function get_bandwidthtype_scale($type) 
# shaper.inc:function get_dummynet_name_list() 
# shaper.inc:function get_hfsc_bandwidth($object, $bw) 
# shaper.inc:function get_interface_bandwidth($object) 
# shaper.inc:function get_interface_list_to_show() 
# shaper.inc:function get_queue_bandwidth($obj) 
# shaper.inc:function read_altq_config() 
# shaper.inc:function read_dummynet_config() 
# shaper.inc:function ref_on_altq_queue_list($parent, $qname) 
# shaper.inc:function removeBwRow(el) 
# shaper.inc:function shaper_do_input_validation($postdata, $reqdfields, $reqdfieldsn, $input_errors) 
# shaper.inc:function unref_on_altq_queue_list($qname) 
# system.inc:function activate_powerd() 
# system.inc:function activate_sysctls() 
# system.inc:function clear_all_log_files($restart = false) 
# system.inc:function clear_log_file($logfile = "
# system.inc:function enable_watchdog() 
# system.inc:function get_default_sysctl_value($id) 
# system.inc:function get_nameservers() 
# system.inc:function get_searchdomains() 
# system.inc:function get_sysctl_descr($sysctl) 
# system.inc:function system_check_reset_button() 
# system.inc:function system_dhcpleases_configure() 
# system.inc:function system_disable_arp_wrong_if() 
# system.inc:function system_dmesg_save() 
# system.inc:function system_do_shell_commands($early = 0) 
# system.inc:function system_enable_arp_wrong_if() 
# system.inc:function system_get_dmesg_boot() 
# system.inc:function system_get_serial() 
# system.inc:function system_get_sysctls() 
# system.inc:function system_get_timezone_list() 
# system.inc:function system_halt() 
# system.inc:function system_hostname_configure() 
# system.inc:function system_hosts_dhcpd_entries() 
# system.inc:function system_hosts_entries($dnscfg) 
# system.inc:function system_hosts_generate() 
# system.inc:function system_hosts_local_entries() 
# system.inc:function system_hosts_override_entries($dnscfg) 
# system.inc:function system_identify_specific_platform() 
# system.inc:function system_ntp_configure() 
# system.inc:function system_ntp_setup_gps($serialport) 
# system.inc:function system_ntp_setup_pps($serialport) 
# system.inc:function system_reboot() 
# system.inc:function system_reboot_cleanup() 
# system.inc:function system_reboot_sync() 
# system.inc:function system_resolvconf_generate($dynupdate = false) 
# system.inc:function system_routing_configure($interface = "") 
# system.inc:function system_routing_enable() 
# system.inc:function system_set_harddisk_standby() 
# system.inc:function system_setup_sysctl() 
# system.inc:function system_staticroutes_configure($interface = "", $update_dns = false) 
# system.inc:function system_syslogd_fixup_server($server) 
# system.inc:function system_syslogd_get_remote_servers($syslogcfg, $facility = "*.*") 
# system.inc:function system_syslogd_start() 
# system.inc:function system_timezone_configure() 
# system.inc:function system_webgui_create_certificate() 
# system.inc:function system_webgui_start() 
# unbound.inc:function create_unbound_chroot_path($cfgsubdir = "") 
# unbound.inc:function do_as_unbound_user($cmd, $param1 = "") 
# unbound.inc:function sync_unbound_service() 
# unbound.inc:function unbound_acl_id_used($id) 
# unbound.inc:function unbound_acls_config($cfgsubdir = "") 
# unbound.inc:function unbound_add_domain_overrides($pvt_rev="", $cfgsubdir = "") 
# unbound.inc:function unbound_add_host_entries($cfgsubdir = "") 
# unbound.inc:function unbound_control($action) 
# unbound.inc:function unbound_generate_config_text($unboundcfg = NULL, $cfgsubdir = "") 
# unbound.inc:function unbound_generate_config($unboundcfg = NULL, $cfgsubdir = "") 
# unbound.inc:function unbound_get_next_id() 
# unbound.inc:function unbound_hosts_generate() 
# unbound.inc:function unbound_local_zone_types() 
# unbound.inc:function unbound_optimization() 
# unbound.inc:function unbound_remote_control_setup($cfgsubdir = "") 
# unbound.inc:function unbound_statistics() 
# util.inc:function alias_expand($name) 
# util.inc:function alias_expand_urltable($name) 
# util.inc:function alias_get_type($name) 
# util.inc:function alias_make_table($config) 
# util.inc:function arp_get_mac_by_ip($ip, $do_ping = true) 
# util.inc:function array_exclude($needle, $haystack) 
# util.inc:function array_merge_recursive_unique($array0, $array1) 
# util.inc:function array_replace_values_recursive($data, $match, $replace) 
# util.inc:function carp_sync_client() 
# util.inc:function check_subnets_overlap($subnet1, $bits1, $subnet2, $bits2) 
# util.inc:function check_subnetsv4_overlap($subnet1, $bits1, $subnet2, $bits2) 
# util.inc:function check_subnetsv6_overlap($subnet1, $bits1, $subnet2, $bits2) 
# util.inc:function clear_subsystem_dirty($subsystem = "") 
# util.inc:function compare_interface_friendly_names($a, $b) 
# util.inc:function exec_command($command) 
# util.inc:function explode_assoc($delimiter, $string) 
# util.inc:function find_smallest_cidr_v4($number) 
# util.inc:function format_bytes($bytes) 
# util.inc:function format_number($num, $precision = 3) 
# util.inc:function gen_subnet($ipaddr, $bits) 
# util.inc:function gen_subnet_mask($bits) 
# util.inc:function gen_subnet_mask_long($bits) 
# util.inc:function gen_subnet_mask_v6($bits) 
# util.inc:function gen_subnet_max($ipaddr, $bits) 
# util.inc:function gen_subnetv4($ipaddr, $bits) 
# util.inc:function gen_subnetv4_max($ipaddr, $bits) 
# util.inc:function gen_subnetv6($ipaddr, $bits) 
# util.inc:function gen_subnetv6_max($ipaddr, $bits) 
# util.inc:function get_alias_list($type = null) 
# util.inc:function get_configured_interface_list_by_realif($only_opt = false, $withdisabled = false) 
# util.inc:function get_configured_interface_list($only_opt = false, $withdisabled = false) 
# util.inc:function get_configured_interface_with_descr($only_opt = false, $withdisabled = false) 
# util.inc:function get_configured_ip_addresses() 
# util.inc:function get_configured_ipv6_addresses($linklocal_fallback = false) 
# util.inc:function get_configured_vip_detail($vipinterface = '', $family = 'inet', $what = 'ip') 
# util.inc:function get_configured_vip_interface($vipinterface = '') 
# util.inc:function get_configured_vip_ipv4($vipinterface = '') 
# util.inc:function get_configured_vip_ipv6($vipinterface = '') 
# util.inc:function get_configured_vip_list($family = 'all', $type = VIP_ALL) 
# util.inc:function get_configured_vip_subnetv4($vipinterface = '') 
# util.inc:function get_configured_vip_subnetv6($vipinterface = '') 
# util.inc:function get_configured_vip($vipinterface = '') 
# util.inc:function get_interface_list($mode = "active", $keyby = "physical", $vfaces = "") 
# util.inc:function get_ll_scope($addr) 
# util.inc:function get_memory() 
# util.inc:function get_single_sysctl($name) 
# util.inc:function get_smart_drive_list() 
# util.inc:function get_staticroutes($returnsubnetsonly = false, $returnhostnames = false, $returnenabledroutesonly = false) 
# util.inc:function get_sysctl($names) 
# util.inc:function get_v6_ptr_zones($subnet, $bits) 
# util.inc:function group_ports($ports, $kflc = false) 
# util.inc:function invalidaliasnamemsg($name, $object = "alias") 
# util.inc:function ip2long32($ip) 
# util.inc:function ip2ulong($ip) 
# util.inc:function ip_after($ip, $offset = 1) 
# util.inc:function ip_before($ip, $offset = 1) 
# util.inc:function ipcmp($a, $b) 
# util.inc:function ip_greater_than($ip1, $ip2) 
# util.inc:function ip_in_subnet($addr, $subnet) 
# util.inc:function ip_less_than($ip1, $ip2) 
# util.inc:function ip_range_size_v4($startip, $endip) 
# util.inc:function ip_range_to_address_array($startip, $endip, $max_size = 5000) 
# util.inc:function ip_range_to_subnet_array($ip1, $ip2) 
# util.inc:function isAjax() 
# util.inc:function is_alias($name) 
# util.inc:function is_domain($domain, $allow_wildcard=false) 
# util.inc:function is_file_included($file = "") 
# util.inc:function is_hostname($hostname, $allow_wildcard=false) 
# util.inc:function is_hostnamewithport($hostport) 
# util.inc:function is_inrange($test, $start, $end) 
# util.inc:function is_inrange_v4($test, $start, $end) 
# util.inc:function is_inrange_v6($test, $start, $end) 
# util.inc:function is_interface_mismatch() 
# util.inc:function is_interface_vlan_mismatch() 
# util.inc:function is_intrange($range, $min, $max) 
# util.inc:function is_ipaddr($ipaddr) 
# util.inc:function is_ipaddroralias($ipaddr) 
# util.inc:function is_ipaddrv4($ipaddr) 
# util.inc:function is_ipaddrv6($ipaddr) 
# util.inc:function is_ipaddrwithport($ipport) 
# util.inc:function is_iprange($range) 
# util.inc:function is_linklocal($ipaddr) 
# util.inc:function is_literalipaddrv6($ipaddr) 
# util.inc:function is_macaddr($macaddr, $partial=false) 
# util.inc:function is_module_loaded($module_name) 
# util.inc:function is_numericint($arg) 
# util.inc:function is_portalias($port) 
# util.inc:function is_port_or_alias($port) 
# util.inc:function is_port_or_range_or_alias($port) 
# util.inc:function is_port_or_range($port) 
# util.inc:function is_port($port) 
# util.inc:function is_portrange($portrange) 
# util.inc:function is_process_running($process) 
# util.inc:function is_subnetoralias($subnet) 
# util.inc:function is_subnet($subnet) 
# util.inc:function is_subnetv4($subnet) 
# util.inc:function is_subnetv6($subnet) 
# util.inc:function is_subsystem_dirty($subsystem = "") 
# util.inc:function is_unqualified_hostname($hostname) 
# util.inc:function is_URL($url) 
# util.inc:function is_validaliasname($name, $return_message = false, $object = "alias") 
# util.inc:function isvalidpid($pidfile) 
# util.inc:function isvalidproc($proc) 
# util.inc:function is_valid_shaperbw($val) 
# util.inc:function killbyname($procname) 
# util.inc:function killbypid($pidfile) 
# util.inc:function lock($lock, $op = LOCK_SH) 
# util.inc:function log_auth($error) 
# util.inc:function log_error($error) 
# util.inc:function long2ip32($ip) 
# util.inc:function mac_format($clientmac) 
# util.inc:function mark_subsystem_dirty($subsystem = "") 
# util.inc:function msort($array, $id = "id", $sort_ascending = true) 
# util.inc:function mute_kernel_msgs() 
# util.inc:function mwexec_bg($command, $clearsigmask = false) 
# util.inc:function mwexec($command, $nologentry = false, $clearsigmask = false, $background = false) 
# util.inc:function post_redirect($page, $params) 
# util.inc:function prefer_ipv4_or_ipv6() 
# util.inc:function refcount_init($reference) 
# util.inc:function refcount_read($reference) 
# util.inc:function refcount_reference($reference) 
# util.inc:function refcount_unreference($reference) 
# util.inc:function resolve_retry($hostname, $retries = 5) 
# util.inc:function return_dir_as_array($dir, $filter_regex = '') 
# util.inc:function run_plugins($directory) 
# util.inc:function safe_mkdir($path, $mode = 0755) 
# util.inc:function send_event($cmd) 
# util.inc:function send_multiple_events($cmds) 
# util.inc:function set_single_sysctl($name, $value) 
# util.inc:function set_sysctl($values) 
# util.inc:function sigkillbyname($procname, $sig) 
# util.inc:function sigkillbypid($pidfile, $sig) 
# util.inc:function start_devd() 
# util.inc:function subnet_size_by_netmask($iptype, $bits, $exact=false) 
# util.inc:function subnet_size($subnet, $exact=false) 
# util.inc:function subnetv4_expand($subnet) 
# util.inc:function text_to_compressed_ip6($text) 
# util.inc:function timeout($timer = 9) 
# util.inc:function try_lock($lock, $timeout = 5) 
# util.inc:function unixnewlines($text) 
# util.inc:function unlink_if_exists($fn) 
# util.inc:function unlock($cfglckkey = 0) 
# util.inc:function unlock_force($lock) 
# util.inc:function unmute_kernel_msgs() 
# util.inc:function update_filter_reload_status($text, $new=false) 
# util.inc:function xml_safe_fieldname($fieldname) 
# voucher.inc:function voucher_auth($voucher_received, $test = 0) 
# voucher.inc:function voucher_configure($sync = false) 
# voucher.inc:function voucher_configure_zone($sync = false) 
# voucher.inc:function voucher_expire($voucher_received) 
# voucher.inc:function voucher_log($priority, $message) 
# voucher.inc:function voucher_read_active_db($roll) 
# voucher.inc:function voucher_read_used_db($roll) 
# voucher.inc:function voucher_save_db_to_config() 
# voucher.inc:function voucher_save_db_to_config_zone() 
# voucher.inc:function voucher_unlink_db($roll) 
# voucher.inc:function voucher_used_count($roll) 
# voucher.inc:function voucher_write_active_db($roll, $active) 
# voucher.inc:function voucher_write_used_db($roll, $vdb) 
# voucher.inc:function xmlrpc_sync_used_voucher($voucher_received, $syncip, $port, $password, $username) 
# voucher.inc:function xmlrpc_sync_voucher_disconnect($dbent, $syncip, $port, $password, $username, $term_cause = 1, $stop_time = null) 
# voucher.inc:function xmlrpc_sync_voucher_expire($vouchers, $syncip, $port, $password, $username) 
# vpn.inc:function vpn_ipsec_configure($restart = false) 
# vpn.inc:function vpn_ipsec_convert_to_modp($index) 
# vpn.inc:function vpn_ipsec_force_reload($interface = "") 
# vpn.inc:function vpn_l2tp_configure() 
# vpn.inc:function vpn_logging_cfgtxt() 
# vpn.inc:function vpn_netgraph_support() 
# vpn.inc:function vpn_pppoes_configure() 
# vpn.inc:function vpn_setup() 
# vpn.inc:function vpn_update_daemon_loglevel($category, $level) 
# vslb.inc:function cleanup_lb_anchor($anchorname = "*") 
# vslb.inc:function cleanup_lb_mark_anchor($name) 
# vslb.inc:function cleanup_lb_marked() 
# vslb.inc:function echo_lbaction($action) 
# vslb.inc:function get_lb_anchors() 
# vslb.inc:function get_lb_redirects() 
# vslb.inc:function get_lb_summary() 
# vslb.inc:function relayd_configure($kill_first=false) 
# xmlparse_attr.inc:function cData_attr($parser, $data) 
# xmlparse_attr.inc:function endElement_attr($parser, $name) 
# xmlparse_attr.inc:function listtags_rd() 
# xmlparse_attr.inc:function startElement_attr($parser, $name, $attrs) 
# xmlparse.inc:function cData($parser, $data) 
# xmlparse.inc:function dump_xml_config($arr, $rootobj) 
# xmlparse.inc:function dump_xml_config_pkg($arr, $rootobj) 
# xmlparse.inc:function dump_xml_config_raw($arr, $rootobj) 
# xmlparse.inc:function dump_xml_config_sub($arr, $indent) 
# xmlparse.inc:function endElement($parser, $name) 
# xmlparse.inc:function listtags() 
# xmlparse.inc:function listtags_pkg() 
# xmlparse.inc:function parse_xml_config($cffile, $rootobj, $isstring = "false") 
# xmlparse.inc:function parse_xml_config_pkg($cffile, $rootobj, $isstring = "false") 
# xmlparse.inc:function parse_xml_config_raw($cffile, $rootobj, $isstring = "false") 
# xmlparse.inc:function startElement($parser, $name, $attrs) 
# xmlrpc.inc:function php_value_to_xmlrpc($value, $force_array = false) 
# xmlrpc.inc:function xmlrpc_params_to_php($params) 
# xmlrpc.inc:function xmlrpc_value_to_php($raw_value) 
# 
